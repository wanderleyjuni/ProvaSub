#Aluno:Wanderley Nolasco Damasceno Junior
#Matricula:2024013044
# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u_Oumx2ZYW-7lRvJ2hV3_OTXoz3RKneE
"""

!pip install PyPDF2 python-docx

!pip install fpdf

from fpdf import FPDF
import os

os.makedirs("/content/documentos", exist_ok=True)

pdf = FPDF()
pdf.add_page()

pdf.set_font("Arial", size=12)

pdf.cell(400, 10, txt="Arquivo PDF com Números", ln=True, align="C")

numeros = [10, 20, 30, 40, 50, 60, 90]
for numero in numeros:
    pdf.cell(400, 10, txt=str(numero), ln=True)

pdf_output_path = "/content/documentos/dados.pdf"
pdf.output(pdf_output_path)

print(f"Arquivo PDF criado em: {pdf_output_path}")

!pip install python-docx

from docx import Document
import os

os.makedirs("/content/documentos", exist_ok=True)

doc = Document()

doc.add_heading('Arquivo DOCX com Números', 0)

numeros = [80, 40, 30, 80, 40, 60, 90]
for numero in numeros:
    doc.add_paragraph(str(numero))

docx_output_path = "/content/documentos/dados.docx"
doc.save(docx_output_path)

print(f"Arquivo DOCX criado em: {docx_output_path}")

import os
import statistics
from PyPDF2 import PdfReader
from docx import Document
from google.colab import files

def ler_pdf(caminho_arquivo):
    try:
        with open(caminho_arquivo, "rb") as f:
            pdf = PdfReader(f)
            numeros = []
            for page in pdf.pages:
                texto = page.extract_text()
                if texto:
                    numeros += [float(i) for i in texto.split() if i.replace('.', '', 1).isdigit()]
            return numeros
    except Exception as e:
        print(f"Erro ao ler o arquivo PDF: {e}")
        return []

def ler_docx(caminho_arquivo):
    try:
        doc = Document(caminho_arquivo)
        numeros = []
        for para in doc.paragraphs:
            numeros += [float(i) for i in para.text.split() if i.replace('.', '', 1).isdigit()]
        return numeros
    except Exception as e:
        print(f"Erro ao ler o arquivo DOCX: {e}")
        return []

def processar_arquivo():
    caminho_arquivo_pdf = "/content/documentos/dados.pdf"
    caminho_arquivo_docx = "/content/documentos/dados.docx"

    if os.path.exists(caminho_arquivo_pdf):
        print(f"Arquivo PDF encontrado: {caminho_arquivo_pdf}")
        numeros = ler_pdf(caminho_arquivo_pdf)
    elif os.path.exists(caminho_arquivo_docx):
        print(f"Arquivo DOCX encontrado: {caminho_arquivo_docx}")
        numeros = ler_docx(caminho_arquivo_docx)
    else:
        print("Nenhum arquivo encontrado.")
        return

    if not numeros:
        print("Nenhum número válido encontrado no arquivo.")
        return

    try:
        media = statistics.mean(numeros)
        mediana = statistics.median(numeros)
        somatorio = sum(numeros)
        maior_valor = max(numeros)
        menor_valor = min(numeros)

        # Exibindo os resultados
        print(f"Média: {media}")
        print(f"Mediana: {mediana}")
        print(f"Somatório: {somatorio}")
        print(f"Maior valor: {maior_valor}")
        print(f"Menor valor: {menor_valor}")
    except Exception as e:
        print(f"Erro ao calcular as estatísticas: {e}")

def baixar_arquivos():
    files.download("/content/documentos/dados.pdf")

    files.download("/content/documentos/dados.docx")

processar_arquivo()

baixar_arquivos()

